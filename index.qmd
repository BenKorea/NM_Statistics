---
title: "R-4.4.1-NM_Statistics"
description:  "NM Statistics by API calls"
author: "BenKorea"
date: "2024-11-24"
date-modified: "2024-11-24"
categories:
  - API
  - Shinylive
  - Nuclear Medicine
---

-   Shinylive로 핵의학통계 웹페이지 구성하는 과정을 정리한 것입니다.

::: {.callout-note title="1단계: `Quarto Website` 프로젝트 만들기" collapse="true" appearance="minimal"}
-   RStudio/File 메뉴에서 `New Project...` 메뉴 선택
-   `New Directory`에 생성되도록 선택
-   Project type은 `Quarto Website`를 선택
-   상위폴더가 `C:/Projects`인지 확인 (=Global Options 사전 지정값)
-   [x] Create a git repository: 체크 유지하여 버전관리 적용
-   [x] Use renv with this project: 체크 유지하여 패키지 독립관리 적용
-   [x] Use visual markdown editor: 체크 유지하여 wizwig 에디터 사용
-   [ ] Open in new session: 기존 프로젝트가 이미 열려있고, 같이 사용할려면 체크
:::

```{r project_name, eval=FALSE, filename="recommeded project name"}
R-4.4.1-NM_Statistics_Example
```

::: {.callout-note title="2단계: 버전관리 제외대상 추가하기" collapse="true" appearance="minimal"}
-   `.gitignore` 파일을 열어서 아래의 내용을 추가하여 git 버전관리에서 제외합니다.
:::

```{r gitignore_add, eval=FALSE, filename=".gitignore"}
.Rprofile
*.Rproj
renv/
```

::: {.callout-note title="3단계: shiny 패키지 설치하기" collapse="true" appearance="minimal"}
:::

```{r install_shiny, eval=FALSE, filename="R Console"}
renv::install("shiny")
```

::: {.callout-note title="4단계: development version shinylive 패키지 설치하기" collapse="true" appearance="minimal"}
-   Development version은 loading 속도가 개선되었으므로 사용해벌 가치가 있습니다.
-   pak 패키지를 먼저 설치합니다.
-   pak 패키지를 이용해서 posit 사의 development version shinylive 패키지를 설치합니다.
:::

```{r install_pak, eval=FALSE, filename="R console"}
renv::install("pak")
```

```{r install_dev_shinylive, eval=FALSE, filename="R console"}
pak::pak("posit-dev/r-shinylive")
```

::: {.callout-note title="6단계: shinylive extension 설치하기" collapse="true" appearance="minimal"}
:::

```{r install_shinylive_extension, eval=FALSE, filename="R Terminal"}
quarto add quarto-ext/shinylive
```

::: {.callout-note title="7단계: output-dir 설정하기" collapse="true" appearance="minimal"}
:::

```{r output_dir, eval=FALSE, filename="_quarto.yml"}
  output-dir: docs
```

::: {.callout-note title="8단계: filter 설정하기" collapse="true" appearance="minimal"}
:::

```{r filter, eval=FALSE, filename="_quarto.yml"}
filters:
  - shinylive
```

::: {.callout-note title="9단계: shinylive 테스트" collapse="true" appearance="minimal"}
-   Preview가 될 때가 있고 안될 때가 있습니다.
-   원인은 아직 모르겠지만, 시간이 경과하면 되는 것 같으므로 일단 진행합니다.
:::

```{{shinylive-r}}
#| label: histogram_example
#| standalone: true
#| viewerHeight: 500


library(shiny)

ui <- fluidPage(
  titlePanel("Hello Shiny!"),
  sidebarLayout(
    sidebarPanel(
      sliderInput(
        inputId = "bins",
        label = "Number of bins:",
        min = 1,
        max = 50,
        value = 30
      )
    ),
    mainPanel(
      plotOutput(outputId = "distPlot")
    )
  )
)

server <- function(input, output) {
  output$distPlot <- renderPlot({
    x <- faithful$waiting
    bins <- seq(min(x), max(x), length.out = input$bins + 1)
    hist(x,
         breaks = bins, col = "#75AADB", border = "white",
         xlab = "Waiting time to next eruption (in mins)",
         main = "Histogram of waiting times"
    )
  })
}

shinyApp(ui = ui, server = server)

```

::: {.callout-note title="10단계: 병원목록 API" collapse="true" appearance="minimal"}
-   심평원에서 관리하고 있는 병원 목록을 API로 호출하고 DB화 합니다.
-   이 코드는 필요시에 한번만 실행하도록 해야 하므로 shiny로 구현하지 않습니다.

```{r install_rjson, eval=FALSE, filename="R console"}
renv::install("rjson")
```

```{r install_httr, eval=FALSE, filename="R console"}
renv::install("httr")
```

```{r install_plyr, eval=FALSE, filename="R console"}
renv::install("plyr")
```

```{r install_xlsx, eval=FALSE, filename="R console"}
renv::install("xlsx")
```
:::

```{{r}}
#| label: all_pageNo_call

library(rjson)
library(httr)
library(plyr)
library(xlsx)


download_api_data <- function(page_No) {
  base_url <- "http://apis.data.go.kr/B551182/hospInfoServicev2"
  call_url <- "getHospBasisList"
  My_API_Key <- "DRwFWZ/jfi6551teJKgRhkKgC+XhcjobN+ccY2MQdF9yZdx8xL5Kn4IljljMCWGsl2ObEco/rm21r14CN7iG0g=="  # 실제 API 키
  params <- list(
    serviceKey = My_API_Key,
    pageNo = page_No
  )
  
  # API 호출
  url <- paste0(base_url, "/", call_url)
  response <- GET(url, query = params)

  if (status_code(response) == 200) {
    json_text <- content(response, as = "text", encoding = "UTF-8")
    data <- fromJSON(json_text)
    return(data)
  } else {
    print(paste("API 호출 실패:", status_code(response)))
    return(NULL)
  }
}

data_list_all <- list()
data_frame <- data.frame()
page_No <- 0
while (TRUE) {
  page_No <- page_No + 1
  data <- download_api_data(page_No)
  
  if (is.null(data) || is.null(data$response$body$items$item)) {
    message("데이터가 더 이상 없습니다. 마지막 페이지: ", page_No)
    break
  }
  
  data_list<-data$response$body$items$item
  data_list_all[[page_No]] <- lapply(data_list, as.data.frame)  # 데이터를 리스트로 저장
  print(page_No)
}

data_frame <- rbind.fill(do.call(c, data_list_all))
write.xlsx(df, "output.xlsx", sheetName = "Sheet1", row.names = FALSE)

```

```{{r}}
#| label: all_pageNo_call_with_for
library(rjson)
library(httr)
library(plyr)
library(xlsx)

# API 데이터 호출 함수
download_api_data <- function(page_No) {
  base_url <- "http://apis.data.go.kr/B551182/hospInfoServicev2"
  call_url <- "getHospBasisList"
  My_API_Key <- "DRwFWZ/jfi6551teJKgRhkKgC+XhcjobN+ccY2MQdF9yZdx8xL5Kn4IljljMCWGsl2ObEco/rm21r14CN7iG0g=="  # 실제 API 키
  params <- list(
    serviceKey = URLencode(My_API_Key),
    pageNo = page_No
  )
  
  # API 호출
  url <- paste0(base_url, "/", call_url)
  response <- GET(url, query = params)
  
  if (status_code(response) == 200) {
    json_text <- content(response, as = "text", encoding = "UTF-8")
    data <- fromJSON(json_text)
    
    # 데이터가 존재하는 경우 반환
    if (!is.null(data$response$body$items$item)) {
      return(data$response$body$items$item)
    } else {
      return(NULL)
    }
  } else {
    print(paste("API 호출 실패:", status_code(response), "페이지:", page_No))
    return(NULL)
  }
}

# 첫 페이지에서 총 페이지 수 확인
initial_data <- download_api_data(1)
if (!is.null(initial_data)) {
  total_count <- as.numeric(initial_data$response$body$totalCount)
  items_per_page <- as.numeric(initial_data$response$body$numOfRows)
  total_pages <- ceiling(total_count / items_per_page)
} else {
  stop("초기 데이터 호출 실패")
}

# 데이터 저장 리스트 초기화
data_list_all <- list()

# for 문을 이용하여 모든 페이지 호출
for (page_No in 1:total_pages) {
  data <- download_api_data(page_No)
  
  if (!is.null(data)) {
    data_list_all[[page_No]] <- lapply(data, as.data.frame)  # 데이터를 리스트로 저장
  }
  
  print(paste("페이지 처리 완료:", page_No))
}

# 데이터 결합
data_frame <- rbind.fill(do.call(c, data_list_all))

# 엑셀로 저장
write.xlsx(data_frame, "output.xlsx", sheetName = "Sheet1", row.names = FALSE)
```
