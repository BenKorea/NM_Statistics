[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R-4.4.1-NM_Statistics",
    "section": "",
    "text": "Shinylive로 핵의학통계 웹페이지 구성하는 과정을 정리한 것입니다.\n\n\n\n\n\n\n\n1단계: Quarto Website 프로젝트 만들기\n\n\n\n\n\n\nRStudio/File 메뉴에서 New Project... 메뉴 선택\nNew Directory에 생성되도록 선택\nProject type은 Quarto Website를 선택\n상위폴더가 C:/Projects인지 확인 (=Global Options 사전 지정값)\nCreate a git repository: 체크 유지하여 버전관리 적용\nUse renv with this project: 체크 유지하여 패키지 독립관리 적용\nUse visual markdown editor: 체크 유지하여 wizwig 에디터 사용\nOpen in new session: 기존 프로젝트가 이미 열려있고, 같이 사용할려면 체크\n\n\n\n\n\n\n\nrecommeded project name\n\nR-4.4.1-NM_Statistics_Example\n\n\n\n\n\n\n\n\n2단계: 버전관리 제외대상 추가하기\n\n\n\n\n\n\n.gitignore 파일을 열어서 아래의 내용을 추가하여 git 버전관리에서 제외합니다.\n\n\n\n\n\n\n\n.gitignore\n\n.Rprofile\n*.Rproj\nrenv/\n\n\n\n\n\n\n\n\n3단계: shiny 패키지 설치하기\n\n\n\n\n\n\n\n\n\n\n\n\nR Console\n\nrenv::install(\"shiny\")\n\n\n\n\n\n\n\n\n4단계: development version shinylive 패키지 설치하기\n\n\n\n\n\n\nDevelopment version은 loading 속도가 개선되었으므로 사용해벌 가치가 있습니다.\npak 패키지를 먼저 설치합니다.\npak 패키지를 이용해서 posit 사의 development version shinylive 패키지를 설치합니다.\n\n\n\n\n\n\n\nR console\n\nrenv::install(\"pak\")\n\n\n\n\n\nR console\n\npak::pak(\"posit-dev/r-shinylive\")\n\n\n\n\n\n\n\n\n6단계: shinylive extension 설치하기\n\n\n\n\n\n\n\n\n\n\n\n\nR Terminal\n\nquarto add quarto-ext/shinylive\n\n\n\n\n\n\n\n\n7단계: output-dir 설정하기\n\n\n\n\n\n\n\n\n\n\n\n\n_quarto.yml\n\n  output-dir: docs\n\n\n\n\n\n\n\n\n8단계: filter 설정하기\n\n\n\n\n\n\n\n\n\n\n\n\n_quarto.yml\n\nfilters:\n  - shinylive\n\n\n\n\n\n\n\n\n9단계: shinylive 테스트\n\n\n\n\n\n\nPreview가 될 때가 있고 안될 때가 있습니다.\n원인은 아직 모르겠지만, 시간이 경과하면 되는 것 같으므로 일단 진행합니다.\n\n\n\n\n```{shinylive-r}\n#| label: histogram_example\n#| standalone: true\n#| viewerHeight: 500\n\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  titlePanel(\"Hello Shiny!\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\n        inputId = \"bins\",\n        label = \"Number of bins:\",\n        min = 1,\n        max = 50,\n        value = 30\n      )\n    ),\n    mainPanel(\n      plotOutput(outputId = \"distPlot\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  output$distPlot &lt;- renderPlot({\n    x &lt;- faithful$waiting\n    bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n    hist(x,\n         breaks = bins, col = \"#75AADB\", border = \"white\",\n         xlab = \"Waiting time to next eruption (in mins)\",\n         main = \"Histogram of waiting times\"\n    )\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n```\n\n\n\n\n\n\n10단계: API 테스트\n\n\n\n\n\n\n심평원에서 관리하고 있는 병원 목록을 호출하는 API를 테스트합니다.\n\n\n\n\nR console\n\nrenv::install(\"rjson\")\n\n\n\n\n\nR console\n\nrenv::install(\"httr\")\n\n\n\n\n\nR console\n\nrenv::install(\"plyr\")\n\n\n\n테스트결과 parameters에 pageNo와 numOfRows를 지정하지 않으면 각각 1과 10으로 반환됩니다. 따라서 pageNo를 증가시키면서 오류가 발생할 때까지 호출하는 알고리즘으로 수정이 필요합니다.\n\n\n\n\n```{r}\n#| label: single API call\n\nlibrary(rjson)\nlibrary(httr)\nlibrary(plyr)\n\ndownload_api_data &lt;- function() {\n  base_url &lt;- \"http://apis.data.go.kr/B551182/hospInfoServicev2\"\n  call_url &lt;- \"getHospBasisList\"\n  My_API_Key &lt;- \"DRwFWZ/jfi6551teJKgRhkKgC+XhcjobN+ccY2MQdF9yZdx8xL5Kn4IljljMCWGsl2ObEco/rm21r14CN7iG0g==\"  # 실제 API 키\n  params &lt;- list(\n    serviceKey = My_API_Key\n  )\n  \n  # API 호출\n  url &lt;- paste0(base_url, \"/\", call_url)\n  response &lt;- GET(url, query = params)\n\n  if (status_code(response) == 200) {\n    json_text &lt;- content(response, as = \"text\")\n    data &lt;- fromJSON(json_text)\n    return(data)\n  } else {\n    print(paste(\"API 호출 실패:\", status_code(response)))\n    return(NULL)\n  }\n}\n\ndata &lt;- download_api_data()\ndata_list&lt;-data$response$body$items$item\ndf &lt;- rbind.fill(lapply(data_list, as.data.frame))\nprint(df)\n\n```\n\n\n\n\n\n\n11단계: PageNo 반복호출하기\n\n\n\n\n\n\n테스트결과 parameters에 pageNo와 numOfRows를 지정하지 않으면 각각 1과 10으로 반환됩니다. 따라서 pageNo를 증가시키면서 오류가 발생할 때까지 호출하는 알고리즘으로 수정이 필요합니다.\n\n\n\n\n```{r}\n#| label: all_pageNo_call\nlibrary(httr)\nlibrary(rjson)\nlibrary(plyr)\n\n# API 호출 함수\nfetch_hospital_data &lt;- function(api_key, page_no) {\n  base_url &lt;- \"http://apis.data.go.kr/B551182/hospInfoService/getHospBasisList\"\n  call_url &lt;- \"getHospBasisList\"  \n  # 요청 파라미터 설정\n  params &lt;- list(\n    serviceKey = api_key,\n    pageNo = page_no\n  )\n\n  # API 호출\n  url &lt;- paste0(base_url, \"/\", call_url)\n  response &lt;- GET(url, query = params)  \n  \n  # 응답 상태 확인\n  if (status_code(response) == 200) {\n    # JSON 데이터 파싱\n    data &lt;- fromJSON(content(response, as = \"text\", encoding = \"UTF-8\"))\n    return(data$response$body$items$item)  # 실제 데이터 추출\n  } else {\n    message(\"API 호출 실패: \", status_code(response))\n    return(NULL)\n  }\n}\n\n# API 키 설정 (자신의 API 키를 여기에 입력)\napi_key &lt;- \"DRwFWZ/jfi6551teJKgRhkKgC+XhcjobN+ccY2MQdF9yZdx8xL5Kn4IljljMCWGsl2ObEco/rm21r14CN7iG0g==\"\n\n# 반복 호출 및 데이터 수집\nhospital_data &lt;- list()\n\nfor (page_no in 1:100) {\n  # 데이터 가져오기\n  page_data &lt;- fetch_hospital_data(api_key, page_no)\n  \n  if (is.null(page_data)) {\n    message(\"더 이상의 데이터가 없습니다. 페이지 번호: \", page_no)\n    break  # 데이터가 없으면 루프 종료\n  }\n  \n  # 데이터를 리스트에 추가\n  hospital_data &lt;- c(hospital_data, page_data)\n}\n\n# 리스트를 데이터 프레임으로 변환\nhospital_df &lt;- ldply(hospital_data, data.frame)\n\n# 결과 출력\nprint(hospital_df)\n```"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]